// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file posts/v1/posts.proto (package posts.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file posts/v1/posts.proto.
 */
export const file_posts_v1_posts: GenFile = /*@__PURE__*/
  fileDesc("ChRwb3N0cy92MS9wb3N0cy5wcm90bxIIcG9zdHMudjEipgEKDEltYWdlVmFyaWFudBIVCgN1cmwYASABKAlCCLpIBXIDiAEBEhYKBXdpZHRoGAIgASgFQge6SAQaAiAAEhcKBmhlaWdodBgDIAEoBUIHukgEGgIgABIVCgRzaXplGAQgASgDQge6SAQaAiAAEjcKDHZhcmlhbnRfdHlwZRgFIAEoDjIVLnBvc3RzLnYxLlZhcmlhbnRUeXBlQgq6SAeCAQQYARgCIsACCgRQb3N0EhkKB3Bvc3RfaWQYASABKAlCCLpIBXIDsAEBEhsKCWF1dGhvcl9pZBgCIAEoCUIIukgFcgOwAQESMAoGaW1hZ2VzGAMgAygLMhYucG9zdHMudjEuSW1hZ2VWYXJpYW50Qgi6SAWSAQIIARIlCg9zb3VuZGNsb3VkX3NvbmcYBCABKAlCB7pIBHICEAFIAIgBARIrChVzb3VuZGNsb3VkX3Nvbmdfc3RhcnQYBSABKAVCB7pIBBoCKABIAYgBARIcCgtkZXNjcmlwdGlvbhgGIAEoCUIHukgEcgIQARIuCgpjcmVhdGVkX2F0GAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEISChBfc291bmRjbG91ZF9zb25nQhgKFl9zb3VuZGNsb3VkX3Nvbmdfc3RhcnQi6QIKDkFkZFBvc3RSZXF1ZXN0EhsKCWF1dGhvcl9pZBgBIAEoCUIIukgFcgOwAQESIwoSdXBsb2FkX3Nlc3Npb25fa2V5GAIgASgJQge6SARyAhABEhsKCWltYWdlX3VybBgDIAEoCUIIukgFcgOIAQESHAoLaW1hZ2Vfd2lkdGgYBCABKAVCB7pIBBoCIAASHQoMaW1hZ2VfaGVpZ2h0GAUgASgFQge6SAQaAiAAEhsKCmltYWdlX3NpemUYBiABKANCB7pIBBoCIAASJQoPc291bmRjbG91ZF9zb25nGAcgASgJQge6SARyAhABSACIAQESKwoVc291bmRjbG91ZF9zb25nX3N0YXJ0GAggASgFQge6SAQaAigASAGIAQESHAoLZGVzY3JpcHRpb24YCSABKAlCB7pIBHICEAFCEgoQX3NvdW5kY2xvdWRfc29uZ0IYChZfc291bmRjbG91ZF9zb25nX3N0YXJ0Ii8KD0FkZFBvc3RSZXNwb25zZRIcCgRwb3N0GAEgASgLMg4ucG9zdHMudjEuUG9zdCIvChJHZXRQb3N0QnlJRFJlcXVlc3QSGQoHcG9zdF9pZBgBIAEoCUIIukgFcgOwAQEiMwoTR2V0UG9zdEJ5SURSZXNwb25zZRIcCgRwb3N0GAEgASgLMg4ucG9zdHMudjEuUG9zdCItCg9HZXRQb3N0c1JlcXVlc3QSGgoIcG9zdF9pZHMYASADKAlCCLpIBZIBAggBIjEKEEdldFBvc3RzUmVzcG9uc2USHQoFcG9zdHMYASADKAsyDi5wb3N0cy52MS5Qb3N0Ii4KEURlbGV0ZVBvc3RSZXF1ZXN0EhkKB3Bvc3RfaWQYASABKAlCCLpIBXIDsAEBIhQKEkRlbGV0ZVBvc3RSZXNwb25zZSJ4ChNHZXRVcGxvYWRVcmxSZXF1ZXN0EhsKCWF1dGhvcl9pZBgBIAEoCUIIukgFcgOwAQESKAoJbWltZV90eXBlGAIgASgJQhW6SBJyEDIOXlx3Ky9bLSsuXHddKyQSGgoJZmlsZV9zaXplGAMgASgDQge6SAQaAiAAIlkKFEdldFVwbG9hZFVybFJlc3BvbnNlEhwKCnVwbG9hZF91cmwYASABKAlCCLpIBXIDiAEBEiMKEnVwbG9hZF9zZXNzaW9uX2tleRgCIAEoCUIHukgEcgIQASpICgtWYXJpYW50VHlwZRIcChhWQVJJQU5UX1RZUEVfVU5TUEVDSUZJRUQQABIMCghPUklHSU5BTBABEg0KCVRIVU1CTkFJTBACMvUCCgxQb3N0c1NlcnZpY2USPgoHQWRkUG9zdBIYLnBvc3RzLnYxLkFkZFBvc3RSZXF1ZXN0GhkucG9zdHMudjEuQWRkUG9zdFJlc3BvbnNlEkoKC0dldFBvc3RCeUlEEhwucG9zdHMudjEuR2V0UG9zdEJ5SURSZXF1ZXN0Gh0ucG9zdHMudjEuR2V0UG9zdEJ5SURSZXNwb25zZRJBCghHZXRQb3N0cxIZLnBvc3RzLnYxLkdldFBvc3RzUmVxdWVzdBoaLnBvc3RzLnYxLkdldFBvc3RzUmVzcG9uc2USRwoKRGVsZXRlUG9zdBIbLnBvc3RzLnYxLkRlbGV0ZVBvc3RSZXF1ZXN0GhwucG9zdHMudjEuRGVsZXRlUG9zdFJlc3BvbnNlEk0KDEdldFVwbG9hZFVybBIdLnBvc3RzLnYxLkdldFVwbG9hZFVybFJlcXVlc3QaHi5wb3N0cy52MS5HZXRVcGxvYWRVcmxSZXNwb25zZUJDWkFnaXRodWIuY29tL3RlY2gtaW5zcGlyZS9hcGktY29udHJhY3RzL2FwaS9nZW4vZ28vcG9zdHMvdjE7cG9zdHN2MWIGcHJvdG8z", [file_buf_validate_validate, file_google_protobuf_timestamp]);

/**
 * ImageVariant describes a derived version of a post image, such as an original
 * or thumbnail variant.
 *
 * @generated from message posts.v1.ImageVariant
 */
export type ImageVariant = Message<"posts.v1.ImageVariant"> & {
  /**
   * S3 URL of the image variant.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Width of the image in pixels.
   *
   * @generated from field: int32 width = 2;
   */
  width: number;

  /**
   * Height of the image in pixels.
   *
   * @generated from field: int32 height = 3;
   */
  height: number;

  /**
   * Size of the image variant in bytes.
   *
   * @generated from field: int64 size = 4;
   */
  size: bigint;

  /**
   * Type of the variant (e.g., ORIG, THUMB). Must be one of the defined variants.
   *
   * @generated from field: posts.v1.VariantType variant_type = 5;
   */
  variantType: VariantType;
};

/**
 * Describes the message posts.v1.ImageVariant.
 * Use `create(ImageVariantSchema)` to create a new message.
 */
export const ImageVariantSchema: GenMessage<ImageVariant> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 0);

/**
 * Post represents a user-created post with one or more image variants and optional
 * SoundCloud metadata.
 *
 * @generated from message posts.v1.Post
 */
export type Post = Message<"posts.v1.Post"> & {
  /**
   * UUIDv7 of the post.
   *
   * @generated from field: string post_id = 1;
   */
  postId: string;

  /**
   * UUID of the post's author.
   *
   * @generated from field: string author_id = 2;
   */
  authorId: string;

  /**
   * List of image variants in order, such as original followed by thumbnails.
   *
   * @generated from field: repeated posts.v1.ImageVariant images = 3;
   */
  images: ImageVariant[];

  /**
   * Optional SoundCloud track identifier.
   *
   * @generated from field: optional string soundcloud_song = 4;
   */
  soundcloudSong?: string;

  /**
   * Optional start time for the SoundCloud track in seconds.
   *
   * @generated from field: optional int32 soundcloud_song_start = 5;
   */
  soundcloudSongStart?: number;

  /**
   * Text description provided by the author.
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * Timestamp when the post was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;
};

/**
 * Describes the message posts.v1.Post.
 * Use `create(PostSchema)` to create a new message.
 */
export const PostSchema: GenMessage<Post> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 1);

/**
 * AddPostRequest contains the data required to create a new post, including the
 * upload session key and metadata for the original image.
 *
 * @generated from message posts.v1.AddPostRequest
 */
export type AddPostRequest = Message<"posts.v1.AddPostRequest"> & {
  /**
   * UUID of the post's author.
   *
   * @generated from field: string author_id = 1;
   */
  authorId: string;

  /**
   * Key returned by GetUploadUrl, used to validate the upload.
   *
   * @generated from field: string upload_session_key = 2;
   */
  uploadSessionKey: string;

  /**
   * S3 URL of the original uploaded image.
   *
   * @generated from field: string image_url = 3;
   */
  imageUrl: string;

  /**
   * Width of the original image in pixels.
   *
   * @generated from field: int32 image_width = 4;
   */
  imageWidth: number;

  /**
   * Height of the original image in pixels.
   *
   * @generated from field: int32 image_height = 5;
   */
  imageHeight: number;

  /**
   * Size of the original image in bytes.
   *
   * @generated from field: int64 image_size = 6;
   */
  imageSize: bigint;

  /**
   * Optional SoundCloud track identifier.
   *
   * @generated from field: optional string soundcloud_song = 7;
   */
  soundcloudSong?: string;

  /**
   * Optional start time for the SoundCloud track in seconds.
   *
   * @generated from field: optional int32 soundcloud_song_start = 8;
   */
  soundcloudSongStart?: number;

  /**
   * Text description for the post.
   *
   * @generated from field: string description = 9;
   */
  description: string;
};

/**
 * Describes the message posts.v1.AddPostRequest.
 * Use `create(AddPostRequestSchema)` to create a new message.
 */
export const AddPostRequestSchema: GenMessage<AddPostRequest> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 2);

/**
 * AddPostResponse returns the newly created post object.
 *
 * @generated from message posts.v1.AddPostResponse
 */
export type AddPostResponse = Message<"posts.v1.AddPostResponse"> & {
  /**
   * Newly created post object.
   *
   * @generated from field: posts.v1.Post post = 1;
   */
  post?: Post;
};

/**
 * Describes the message posts.v1.AddPostResponse.
 * Use `create(AddPostResponseSchema)` to create a new message.
 */
export const AddPostResponseSchema: GenMessage<AddPostResponse> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 3);

/**
 * GetPostByIDRequest requests a post by its UUID.
 *
 * @generated from message posts.v1.GetPostByIDRequest
 */
export type GetPostByIDRequest = Message<"posts.v1.GetPostByIDRequest"> & {
  /**
   * UUID of the post to retrieve.
   *
   * @generated from field: string post_id = 1;
   */
  postId: string;
};

/**
 * Describes the message posts.v1.GetPostByIDRequest.
 * Use `create(GetPostByIDRequestSchema)` to create a new message.
 */
export const GetPostByIDRequestSchema: GenMessage<GetPostByIDRequest> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 4);

/**
 * GetPostByIDResponse returns a single post object.
 *
 * @generated from message posts.v1.GetPostByIDResponse
 */
export type GetPostByIDResponse = Message<"posts.v1.GetPostByIDResponse"> & {
  /**
   * Requested post object.
   *
   * @generated from field: posts.v1.Post post = 1;
   */
  post?: Post;
};

/**
 * Describes the message posts.v1.GetPostByIDResponse.
 * Use `create(GetPostByIDResponseSchema)` to create a new message.
 */
export const GetPostByIDResponseSchema: GenMessage<GetPostByIDResponse> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 5);

/**
 * GetPostsRequest requests multiple posts by a list of UUIDs.
 *
 * @generated from message posts.v1.GetPostsRequest
 */
export type GetPostsRequest = Message<"posts.v1.GetPostsRequest"> & {
  /**
   * List of UUIDs for the posts to retrieve.
   *
   * @generated from field: repeated string post_ids = 1;
   */
  postIds: string[];
};

/**
 * Describes the message posts.v1.GetPostsRequest.
 * Use `create(GetPostsRequestSchema)` to create a new message.
 */
export const GetPostsRequestSchema: GenMessage<GetPostsRequest> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 6);

/**
 * GetPostsResponse returns a list of retrieved post objects.
 *
 * @generated from message posts.v1.GetPostsResponse
 */
export type GetPostsResponse = Message<"posts.v1.GetPostsResponse"> & {
  /**
   * List of retrieved post objects.
   *
   * @generated from field: repeated posts.v1.Post posts = 1;
   */
  posts: Post[];
};

/**
 * Describes the message posts.v1.GetPostsResponse.
 * Use `create(GetPostsResponseSchema)` to create a new message.
 */
export const GetPostsResponseSchema: GenMessage<GetPostsResponse> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 7);

/**
 * DeletePostRequest requests removal of a post by its UUID.
 *
 * @generated from message posts.v1.DeletePostRequest
 */
export type DeletePostRequest = Message<"posts.v1.DeletePostRequest"> & {
  /**
   * UUID of the post to delete.
   *
   * @generated from field: string post_id = 1;
   */
  postId: string;
};

/**
 * Describes the message posts.v1.DeletePostRequest.
 * Use `create(DeletePostRequestSchema)` to create a new message.
 */
export const DeletePostRequestSchema: GenMessage<DeletePostRequest> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 8);

/**
 * DeletePostResponse is returned when a post has been deleted successfully.
 *
 * @generated from message posts.v1.DeletePostResponse
 */
export type DeletePostResponse = Message<"posts.v1.DeletePostResponse"> & {
};

/**
 * Describes the message posts.v1.DeletePostResponse.
 * Use `create(DeletePostResponseSchema)` to create a new message.
 */
export const DeletePostResponseSchema: GenMessage<DeletePostResponse> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 9);

/**
 * GetUploadUrlRequest requests a presigned S3 URL for image upload.
 *
 * @generated from message posts.v1.GetUploadUrlRequest
 */
export type GetUploadUrlRequest = Message<"posts.v1.GetUploadUrlRequest"> & {
  /**
   * UUID of the post's author.
   *
   * @generated from field: string author_id = 1;
   */
  authorId: string;

  /**
   * Expected MIME type of the uploaded file, e.g., "image/jpeg".
   *
   * @generated from field: string mime_type = 2;
   */
  mimeType: string;

  /**
   * Expected size of the uploaded file in bytes.
   *
   * @generated from field: int64 file_size = 3;
   */
  fileSize: bigint;
};

/**
 * Describes the message posts.v1.GetUploadUrlRequest.
 * Use `create(GetUploadUrlRequestSchema)` to create a new message.
 */
export const GetUploadUrlRequestSchema: GenMessage<GetUploadUrlRequest> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 10);

/**
 * GetUploadUrlResponse returns a presigned URL and session key for S3 uploads.
 *
 * @generated from message posts.v1.GetUploadUrlResponse
 */
export type GetUploadUrlResponse = Message<"posts.v1.GetUploadUrlResponse"> & {
  /**
   * Presigned PUT URL for direct S3 upload.
   *
   * @generated from field: string upload_url = 1;
   */
  uploadUrl: string;

  /**
   * Session key clients must provide when calling AddPost.
   *
   * @generated from field: string upload_session_key = 2;
   */
  uploadSessionKey: string;
};

/**
 * Describes the message posts.v1.GetUploadUrlResponse.
 * Use `create(GetUploadUrlResponseSchema)` to create a new message.
 */
export const GetUploadUrlResponseSchema: GenMessage<GetUploadUrlResponse> = /*@__PURE__*/
  messageDesc(file_posts_v1_posts, 11);

/**
 * Defines the types of image variants.
 *
 * @generated from enum posts.v1.VariantType
 */
export enum VariantType {
  /**
   * @generated from enum value: VARIANT_TYPE_UNSPECIFIED = 0;
   */
  VARIANT_TYPE_UNSPECIFIED = 0,

  /**
   * Original full-size image
   *
   * @generated from enum value: ORIGINAL = 1;
   */
  ORIGINAL = 1,

  /**
   * Thumbnail or preview image
   *
   * @generated from enum value: THUMBNAIL = 2;
   */
  THUMBNAIL = 2,
}

/**
 * Describes the enum posts.v1.VariantType.
 */
export const VariantTypeSchema: GenEnum<VariantType> = /*@__PURE__*/
  enumDesc(file_posts_v1_posts, 0);

/**
 * PostsService provides operations to create, retrieve, and delete posts, as well
 * as to obtain upload URLs for post images.
 *
 * @generated from service posts.v1.PostsService
 */
export const PostsService: GenService<{
  /**
   * AddPost creates a new post record. The client must have already uploaded the
   * image to S3 and provide the upload session key.
   *
   * @generated from rpc posts.v1.PostsService.AddPost
   */
  addPost: {
    methodKind: "unary";
    input: typeof AddPostRequestSchema;
    output: typeof AddPostResponseSchema;
  },
  /**
   * GetPostByID retrieves a single post by its UUID.
   *
   * @generated from rpc posts.v1.PostsService.GetPostByID
   */
  getPostByID: {
    methodKind: "unary";
    input: typeof GetPostByIDRequestSchema;
    output: typeof GetPostByIDResponseSchema;
  },
  /**
   * GetPosts retrieves multiple posts by their UUIDs in a single batch request.
   *
   * @generated from rpc posts.v1.PostsService.GetPosts
   */
  getPosts: {
    methodKind: "unary";
    input: typeof GetPostsRequestSchema;
    output: typeof GetPostsResponseSchema;
  },
  /**
   * DeletePost removes an existing post by its UUID.
   *
   * @generated from rpc posts.v1.PostsService.DeletePost
   */
  deletePost: {
    methodKind: "unary";
    input: typeof DeletePostRequestSchema;
    output: typeof DeletePostResponseSchema;
  },
  /**
   * GetUploadUrl returns a presigned S3 URL and a session key for uploading a post image.
   *
   * @generated from rpc posts.v1.PostsService.GetUploadUrl
   */
  getUploadUrl: {
    methodKind: "unary";
    input: typeof GetUploadUrlRequestSchema;
    output: typeof GetUploadUrlResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_posts_v1_posts, 0);

