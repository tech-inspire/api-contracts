// @generated by protoc-gen-es v2.2.2 with parameter "import_extension=js"
// @generated from file posts/v1/posts.proto (package posts.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file posts/v1/posts.proto.
 */
export declare const file_posts_v1_posts: GenFile;

/**
 * ImageVariant describes a derived version of a post image, such as an original
 * or thumbnail variant.
 *
 * @generated from message posts.v1.ImageVariant
 */
export declare type ImageVariant = Message<"posts.v1.ImageVariant"> & {
  /**
   * S3 URL of the image variant.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Width of the image in pixels.
   *
   * @generated from field: int32 width = 2;
   */
  width: number;

  /**
   * Height of the image in pixels.
   *
   * @generated from field: int32 height = 3;
   */
  height: number;

  /**
   * Size of the image variant in bytes.
   *
   * @generated from field: int32 size = 4;
   */
  size: number;

  /**
   * Type of the variant (e.g., ORIG, THUMB). Must be one of the defined variants.
   *
   * @generated from field: posts.v1.VariantType variant_type = 5;
   */
  variantType: VariantType;
};

/**
 * Describes the message posts.v1.ImageVariant.
 * Use `create(ImageVariantSchema)` to create a new message.
 */
export declare const ImageVariantSchema: GenMessage<ImageVariant>;

/**
 * Post represents a user-created post with one or more image variants and optional
 * SoundCloud metadata.
 *
 * @generated from message posts.v1.Post
 */
export declare type Post = Message<"posts.v1.Post"> & {
  /**
   * UUIDv7 of the post.
   *
   * @generated from field: string post_id = 1;
   */
  postId: string;

  /**
   * UUID of the post's author.
   *
   * @generated from field: string author_id = 2;
   */
  authorId: string;

  /**
   * List of image variants in order, such as original followed by thumbnails.
   *
   * @generated from field: repeated posts.v1.ImageVariant images = 3;
   */
  images: ImageVariant[];

  /**
   * Optional SoundCloud track identifier.
   *
   * @generated from field: optional string soundcloud_song = 4;
   */
  soundcloudSong?: string;

  /**
   * Optional start time for the SoundCloud track in seconds.
   *
   * @generated from field: optional int32 soundcloud_song_start = 5;
   */
  soundcloudSongStart?: number;

  /**
   * Text description provided by the author.
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * Timestamp when the post was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;
};

/**
 * Describes the message posts.v1.Post.
 * Use `create(PostSchema)` to create a new message.
 */
export declare const PostSchema: GenMessage<Post>;

/**
 * AddPostRequest contains the data required to create a new post, including the
 * upload session key and metadata for the original image.
 *
 * @generated from message posts.v1.AddPostRequest
 */
export declare type AddPostRequest = Message<"posts.v1.AddPostRequest"> & {
  /**
   * Key returned by GetUploadUrl, used to validate the upload.
   *
   * @generated from field: string upload_session_key = 2;
   */
  uploadSessionKey: string;

  /**
   * Width of the original image in pixels.
   *
   * @generated from field: int32 image_width = 4;
   */
  imageWidth: number;

  /**
   * Height of the original image in pixels.
   *
   * @generated from field: int32 image_height = 5;
   */
  imageHeight: number;

  /**
   * Size of the original image in bytes.
   *
   * @generated from field: int32 image_size = 6;
   */
  imageSize: number;

  /**
   * Optional SoundCloud track identifier.
   *
   * @generated from field: optional string soundcloud_song = 7;
   */
  soundcloudSong?: string;

  /**
   * Optional start time for the SoundCloud track in seconds.
   *
   * @generated from field: optional int32 soundcloud_song_start = 8;
   */
  soundcloudSongStart?: number;

  /**
   * Text description for the post.
   *
   * @generated from field: string description = 9;
   */
  description: string;
};

/**
 * Describes the message posts.v1.AddPostRequest.
 * Use `create(AddPostRequestSchema)` to create a new message.
 */
export declare const AddPostRequestSchema: GenMessage<AddPostRequest>;

/**
 * AddPostResponse returns the newly created post object.
 *
 * @generated from message posts.v1.AddPostResponse
 */
export declare type AddPostResponse = Message<"posts.v1.AddPostResponse"> & {
  /**
   * Newly created post object.
   *
   * @generated from field: posts.v1.Post post = 1;
   */
  post?: Post;
};

/**
 * Describes the message posts.v1.AddPostResponse.
 * Use `create(AddPostResponseSchema)` to create a new message.
 */
export declare const AddPostResponseSchema: GenMessage<AddPostResponse>;

/**
 * GetPostByIDRequest requests a post by its UUID.
 *
 * @generated from message posts.v1.GetPostByIDRequest
 */
export declare type GetPostByIDRequest = Message<"posts.v1.GetPostByIDRequest"> & {
  /**
   * UUID of the post to retrieve.
   *
   * @generated from field: string post_id = 1;
   */
  postId: string;
};

/**
 * Describes the message posts.v1.GetPostByIDRequest.
 * Use `create(GetPostByIDRequestSchema)` to create a new message.
 */
export declare const GetPostByIDRequestSchema: GenMessage<GetPostByIDRequest>;

/**
 * GetPostByIDResponse returns a single post object.
 *
 * @generated from message posts.v1.GetPostByIDResponse
 */
export declare type GetPostByIDResponse = Message<"posts.v1.GetPostByIDResponse"> & {
  /**
   * Requested post object.
   *
   * @generated from field: posts.v1.Post post = 1;
   */
  post?: Post;
};

/**
 * Describes the message posts.v1.GetPostByIDResponse.
 * Use `create(GetPostByIDResponseSchema)` to create a new message.
 */
export declare const GetPostByIDResponseSchema: GenMessage<GetPostByIDResponse>;

/**
 * GetPostsRequest requests multiple posts by a list of UUIDs.
 *
 * @generated from message posts.v1.GetPostsRequest
 */
export declare type GetPostsRequest = Message<"posts.v1.GetPostsRequest"> & {
  /**
   * List of UUIDs for the posts to retrieve.
   *
   * @generated from field: repeated string post_ids = 1;
   */
  postIds: string[];
};

/**
 * Describes the message posts.v1.GetPostsRequest.
 * Use `create(GetPostsRequestSchema)` to create a new message.
 */
export declare const GetPostsRequestSchema: GenMessage<GetPostsRequest>;

/**
 * GetPostsResponse returns a list of retrieved post objects.
 *
 * @generated from message posts.v1.GetPostsResponse
 */
export declare type GetPostsResponse = Message<"posts.v1.GetPostsResponse"> & {
  /**
   * List of retrieved post objects.
   *
   * @generated from field: repeated posts.v1.Post posts = 1;
   */
  posts: Post[];
};

/**
 * Describes the message posts.v1.GetPostsResponse.
 * Use `create(GetPostsResponseSchema)` to create a new message.
 */
export declare const GetPostsResponseSchema: GenMessage<GetPostsResponse>;

/**
 * DeletePostRequest requests removal of a post by its UUID.
 *
 * @generated from message posts.v1.DeletePostRequest
 */
export declare type DeletePostRequest = Message<"posts.v1.DeletePostRequest"> & {
  /**
   * UUID of the post to delete.
   *
   * @generated from field: string post_id = 1;
   */
  postId: string;
};

/**
 * Describes the message posts.v1.DeletePostRequest.
 * Use `create(DeletePostRequestSchema)` to create a new message.
 */
export declare const DeletePostRequestSchema: GenMessage<DeletePostRequest>;

/**
 * DeletePostResponse is returned when a post has been deleted successfully.
 *
 * @generated from message posts.v1.DeletePostResponse
 */
export declare type DeletePostResponse = Message<"posts.v1.DeletePostResponse"> & {
};

/**
 * Describes the message posts.v1.DeletePostResponse.
 * Use `create(DeletePostResponseSchema)` to create a new message.
 */
export declare const DeletePostResponseSchema: GenMessage<DeletePostResponse>;

/**
 * GetUploadUrlRequest requests a presigned S3 URL for image upload.
 *
 * @generated from message posts.v1.GetUploadUrlRequest
 */
export declare type GetUploadUrlRequest = Message<"posts.v1.GetUploadUrlRequest"> & {
  /**
   * Expected MIME type of the uploaded file, e.g., "image/jpeg".
   *
   * @generated from field: string mime_type = 2;
   */
  mimeType: string;

  /**
   * Expected size of the uploaded file in bytes.
   *
   * @generated from field: int32 file_size = 3;
   */
  fileSize: number;
};

/**
 * Describes the message posts.v1.GetUploadUrlRequest.
 * Use `create(GetUploadUrlRequestSchema)` to create a new message.
 */
export declare const GetUploadUrlRequestSchema: GenMessage<GetUploadUrlRequest>;

/**
 * GetUploadUrlResponse returns a presigned URL and session key for S3 uploads.
 *
 * @generated from message posts.v1.GetUploadUrlResponse
 */
export declare type GetUploadUrlResponse = Message<"posts.v1.GetUploadUrlResponse"> & {
  /**
   * Presigned PUT URL for direct S3 upload.
   *
   * @generated from field: string upload_url = 1;
   */
  uploadUrl: string;

  /**
   * Session key clients must provide when calling AddPost.
   *
   * @generated from field: string upload_session_key = 2;
   */
  uploadSessionKey: string;

  /**
   * @generated from field: string method = 3;
   */
  method: string;

  /**
   * @generated from field: map<string, string> headers = 4;
   */
  headers: { [key: string]: string };
};

/**
 * Describes the message posts.v1.GetUploadUrlResponse.
 * Use `create(GetUploadUrlResponseSchema)` to create a new message.
 */
export declare const GetUploadUrlResponseSchema: GenMessage<GetUploadUrlResponse>;

/**
 * Defines the types of image variants.
 *
 * @generated from enum posts.v1.VariantType
 */
export enum VariantType {
  /**
   * @generated from enum value: VARIANT_TYPE_UNSPECIFIED = 0;
   */
  VARIANT_TYPE_UNSPECIFIED = 0,

  /**
   * Original full-size image
   *
   * @generated from enum value: ORIGINAL = 1;
   */
  ORIGINAL = 1,

  /**
   * Thumbnail or preview image
   *
   * @generated from enum value: THUMBNAIL = 2;
   */
  THUMBNAIL = 2,
}

/**
 * Describes the enum posts.v1.VariantType.
 */
export declare const VariantTypeSchema: GenEnum<VariantType>;

/**
 * PostsService provides operations to create, retrieve, and delete posts, as well
 * as to obtain upload URLs for post images.
 *
 * @generated from service posts.v1.PostsService
 */
export declare const PostsService: GenService<{
  /**
   * AddPost creates a new post record. The client must have already uploaded the
   * image to S3 and provide the upload session key.
   *
   * @generated from rpc posts.v1.PostsService.AddPost
   */
  addPost: {
    methodKind: "unary";
    input: typeof AddPostRequestSchema;
    output: typeof AddPostResponseSchema;
  },
  /**
   * GetPostByID retrieves a single post by its UUID.
   *
   * @generated from rpc posts.v1.PostsService.GetPostByID
   */
  getPostByID: {
    methodKind: "unary";
    input: typeof GetPostByIDRequestSchema;
    output: typeof GetPostByIDResponseSchema;
  },
  /**
   * GetPosts retrieves multiple posts by their UUIDs in a single batch request.
   *
   * @generated from rpc posts.v1.PostsService.GetPosts
   */
  getPosts: {
    methodKind: "unary";
    input: typeof GetPostsRequestSchema;
    output: typeof GetPostsResponseSchema;
  },
  /**
   * DeletePost removes an existing post by its UUID.
   *
   * @generated from rpc posts.v1.PostsService.DeletePost
   */
  deletePost: {
    methodKind: "unary";
    input: typeof DeletePostRequestSchema;
    output: typeof DeletePostResponseSchema;
  },
  /**
   * GetUploadUrl returns a presigned S3 URL and a session key for uploading a post image.
   *
   * @generated from rpc posts.v1.PostsService.GetUploadUrl
   */
  getUploadUrl: {
    methodKind: "unary";
    input: typeof GetUploadUrlRequestSchema;
    output: typeof GetUploadUrlResponseSchema;
  },
}>;

