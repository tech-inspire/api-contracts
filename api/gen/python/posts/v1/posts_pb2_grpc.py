# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from posts.v1 import posts_pb2 as posts_dot_v1_dot_posts__pb2


class PostsServiceStub(object):
    """PostsService provides operations to create, retrieve, and delete posts, as well
    as to obtain upload URLs for post images.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddPost = channel.unary_unary(
                '/posts.v1.PostsService/AddPost',
                request_serializer=posts_dot_v1_dot_posts__pb2.AddPostRequest.SerializeToString,
                response_deserializer=posts_dot_v1_dot_posts__pb2.AddPostResponse.FromString,
                _registered_method=True)
        self.GetPostByID = channel.unary_unary(
                '/posts.v1.PostsService/GetPostByID',
                request_serializer=posts_dot_v1_dot_posts__pb2.GetPostByIDRequest.SerializeToString,
                response_deserializer=posts_dot_v1_dot_posts__pb2.GetPostByIDResponse.FromString,
                _registered_method=True)
        self.GetPosts = channel.unary_unary(
                '/posts.v1.PostsService/GetPosts',
                request_serializer=posts_dot_v1_dot_posts__pb2.GetPostsRequest.SerializeToString,
                response_deserializer=posts_dot_v1_dot_posts__pb2.GetPostsResponse.FromString,
                _registered_method=True)
        self.DeletePost = channel.unary_unary(
                '/posts.v1.PostsService/DeletePost',
                request_serializer=posts_dot_v1_dot_posts__pb2.DeletePostRequest.SerializeToString,
                response_deserializer=posts_dot_v1_dot_posts__pb2.DeletePostResponse.FromString,
                _registered_method=True)
        self.GetUploadUrl = channel.unary_unary(
                '/posts.v1.PostsService/GetUploadUrl',
                request_serializer=posts_dot_v1_dot_posts__pb2.GetUploadUrlRequest.SerializeToString,
                response_deserializer=posts_dot_v1_dot_posts__pb2.GetUploadUrlResponse.FromString,
                _registered_method=True)


class PostsServiceServicer(object):
    """PostsService provides operations to create, retrieve, and delete posts, as well
    as to obtain upload URLs for post images.
    """

    def AddPost(self, request, context):
        """AddPost creates a new post record. The client must have already uploaded the
        image to S3 and provide the upload session key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostByID(self, request, context):
        """GetPostByID retrieves a single post by its UUID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPosts(self, request, context):
        """GetPosts retrieves multiple posts by their UUIDs in a single batch request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePost(self, request, context):
        """DeletePost removes an existing post by its UUID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUploadUrl(self, request, context):
        """GetUploadUrl returns a presigned S3 URL and a session key for uploading a post image.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PostsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddPost': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPost,
                    request_deserializer=posts_dot_v1_dot_posts__pb2.AddPostRequest.FromString,
                    response_serializer=posts_dot_v1_dot_posts__pb2.AddPostResponse.SerializeToString,
            ),
            'GetPostByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostByID,
                    request_deserializer=posts_dot_v1_dot_posts__pb2.GetPostByIDRequest.FromString,
                    response_serializer=posts_dot_v1_dot_posts__pb2.GetPostByIDResponse.SerializeToString,
            ),
            'GetPosts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPosts,
                    request_deserializer=posts_dot_v1_dot_posts__pb2.GetPostsRequest.FromString,
                    response_serializer=posts_dot_v1_dot_posts__pb2.GetPostsResponse.SerializeToString,
            ),
            'DeletePost': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePost,
                    request_deserializer=posts_dot_v1_dot_posts__pb2.DeletePostRequest.FromString,
                    response_serializer=posts_dot_v1_dot_posts__pb2.DeletePostResponse.SerializeToString,
            ),
            'GetUploadUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUploadUrl,
                    request_deserializer=posts_dot_v1_dot_posts__pb2.GetUploadUrlRequest.FromString,
                    response_serializer=posts_dot_v1_dot_posts__pb2.GetUploadUrlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'posts.v1.PostsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('posts.v1.PostsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PostsService(object):
    """PostsService provides operations to create, retrieve, and delete posts, as well
    as to obtain upload URLs for post images.
    """

    @staticmethod
    def AddPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/posts.v1.PostsService/AddPost',
            posts_dot_v1_dot_posts__pb2.AddPostRequest.SerializeToString,
            posts_dot_v1_dot_posts__pb2.AddPostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPostByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/posts.v1.PostsService/GetPostByID',
            posts_dot_v1_dot_posts__pb2.GetPostByIDRequest.SerializeToString,
            posts_dot_v1_dot_posts__pb2.GetPostByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/posts.v1.PostsService/GetPosts',
            posts_dot_v1_dot_posts__pb2.GetPostsRequest.SerializeToString,
            posts_dot_v1_dot_posts__pb2.GetPostsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/posts.v1.PostsService/DeletePost',
            posts_dot_v1_dot_posts__pb2.DeletePostRequest.SerializeToString,
            posts_dot_v1_dot_posts__pb2.DeletePostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUploadUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/posts.v1.PostsService/GetUploadUrl',
            posts_dot_v1_dot_posts__pb2.GetUploadUrlRequest.SerializeToString,
            posts_dot_v1_dot_posts__pb2.GetUploadUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
