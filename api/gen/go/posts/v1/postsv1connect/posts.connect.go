// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: posts/v1/posts.proto

package postsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tech-inspire/api-contracts/api/gen/go/posts/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PostsServiceName is the fully-qualified name of the PostsService service.
	PostsServiceName = "posts.v1.PostsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostsServiceAddPostProcedure is the fully-qualified name of the PostsService's AddPost RPC.
	PostsServiceAddPostProcedure = "/posts.v1.PostsService/AddPost"
	// PostsServiceGetPostByIDProcedure is the fully-qualified name of the PostsService's GetPostByID
	// RPC.
	PostsServiceGetPostByIDProcedure = "/posts.v1.PostsService/GetPostByID"
	// PostsServiceGetPostsProcedure is the fully-qualified name of the PostsService's GetPosts RPC.
	PostsServiceGetPostsProcedure = "/posts.v1.PostsService/GetPosts"
	// PostsServiceDeletePostProcedure is the fully-qualified name of the PostsService's DeletePost RPC.
	PostsServiceDeletePostProcedure = "/posts.v1.PostsService/DeletePost"
	// PostsServiceGetUploadUrlProcedure is the fully-qualified name of the PostsService's GetUploadUrl
	// RPC.
	PostsServiceGetUploadUrlProcedure = "/posts.v1.PostsService/GetUploadUrl"
)

// PostsServiceClient is a client for the posts.v1.PostsService service.
type PostsServiceClient interface {
	// AddPost creates a new post record. The client must have already uploaded the
	// image to S3 and provide the upload session key.
	AddPost(context.Context, *connect.Request[v1.AddPostRequest]) (*connect.Response[v1.AddPostResponse], error)
	// GetPostByID retrieves a single post by its UUID.
	GetPostByID(context.Context, *connect.Request[v1.GetPostByIDRequest]) (*connect.Response[v1.GetPostByIDResponse], error)
	// GetPosts retrieves multiple posts by their UUIDs in a single batch request.
	GetPosts(context.Context, *connect.Request[v1.GetPostsRequest]) (*connect.Response[v1.GetPostsResponse], error)
	// DeletePost removes an existing post by its UUID.
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
	// GetUploadUrl returns a presigned S3 URL and a session key for uploading a post image.
	GetUploadUrl(context.Context, *connect.Request[v1.GetUploadUrlRequest]) (*connect.Response[v1.GetUploadUrlResponse], error)
}

// NewPostsServiceClient constructs a client for the posts.v1.PostsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PostsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	postsServiceMethods := v1.File_posts_v1_posts_proto.Services().ByName("PostsService").Methods()
	return &postsServiceClient{
		addPost: connect.NewClient[v1.AddPostRequest, v1.AddPostResponse](
			httpClient,
			baseURL+PostsServiceAddPostProcedure,
			connect.WithSchema(postsServiceMethods.ByName("AddPost")),
			connect.WithClientOptions(opts...),
		),
		getPostByID: connect.NewClient[v1.GetPostByIDRequest, v1.GetPostByIDResponse](
			httpClient,
			baseURL+PostsServiceGetPostByIDProcedure,
			connect.WithSchema(postsServiceMethods.ByName("GetPostByID")),
			connect.WithClientOptions(opts...),
		),
		getPosts: connect.NewClient[v1.GetPostsRequest, v1.GetPostsResponse](
			httpClient,
			baseURL+PostsServiceGetPostsProcedure,
			connect.WithSchema(postsServiceMethods.ByName("GetPosts")),
			connect.WithClientOptions(opts...),
		),
		deletePost: connect.NewClient[v1.DeletePostRequest, v1.DeletePostResponse](
			httpClient,
			baseURL+PostsServiceDeletePostProcedure,
			connect.WithSchema(postsServiceMethods.ByName("DeletePost")),
			connect.WithClientOptions(opts...),
		),
		getUploadUrl: connect.NewClient[v1.GetUploadUrlRequest, v1.GetUploadUrlResponse](
			httpClient,
			baseURL+PostsServiceGetUploadUrlProcedure,
			connect.WithSchema(postsServiceMethods.ByName("GetUploadUrl")),
			connect.WithClientOptions(opts...),
		),
	}
}

// postsServiceClient implements PostsServiceClient.
type postsServiceClient struct {
	addPost      *connect.Client[v1.AddPostRequest, v1.AddPostResponse]
	getPostByID  *connect.Client[v1.GetPostByIDRequest, v1.GetPostByIDResponse]
	getPosts     *connect.Client[v1.GetPostsRequest, v1.GetPostsResponse]
	deletePost   *connect.Client[v1.DeletePostRequest, v1.DeletePostResponse]
	getUploadUrl *connect.Client[v1.GetUploadUrlRequest, v1.GetUploadUrlResponse]
}

// AddPost calls posts.v1.PostsService.AddPost.
func (c *postsServiceClient) AddPost(ctx context.Context, req *connect.Request[v1.AddPostRequest]) (*connect.Response[v1.AddPostResponse], error) {
	return c.addPost.CallUnary(ctx, req)
}

// GetPostByID calls posts.v1.PostsService.GetPostByID.
func (c *postsServiceClient) GetPostByID(ctx context.Context, req *connect.Request[v1.GetPostByIDRequest]) (*connect.Response[v1.GetPostByIDResponse], error) {
	return c.getPostByID.CallUnary(ctx, req)
}

// GetPosts calls posts.v1.PostsService.GetPosts.
func (c *postsServiceClient) GetPosts(ctx context.Context, req *connect.Request[v1.GetPostsRequest]) (*connect.Response[v1.GetPostsResponse], error) {
	return c.getPosts.CallUnary(ctx, req)
}

// DeletePost calls posts.v1.PostsService.DeletePost.
func (c *postsServiceClient) DeletePost(ctx context.Context, req *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return c.deletePost.CallUnary(ctx, req)
}

// GetUploadUrl calls posts.v1.PostsService.GetUploadUrl.
func (c *postsServiceClient) GetUploadUrl(ctx context.Context, req *connect.Request[v1.GetUploadUrlRequest]) (*connect.Response[v1.GetUploadUrlResponse], error) {
	return c.getUploadUrl.CallUnary(ctx, req)
}

// PostsServiceHandler is an implementation of the posts.v1.PostsService service.
type PostsServiceHandler interface {
	// AddPost creates a new post record. The client must have already uploaded the
	// image to S3 and provide the upload session key.
	AddPost(context.Context, *connect.Request[v1.AddPostRequest]) (*connect.Response[v1.AddPostResponse], error)
	// GetPostByID retrieves a single post by its UUID.
	GetPostByID(context.Context, *connect.Request[v1.GetPostByIDRequest]) (*connect.Response[v1.GetPostByIDResponse], error)
	// GetPosts retrieves multiple posts by their UUIDs in a single batch request.
	GetPosts(context.Context, *connect.Request[v1.GetPostsRequest]) (*connect.Response[v1.GetPostsResponse], error)
	// DeletePost removes an existing post by its UUID.
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
	// GetUploadUrl returns a presigned S3 URL and a session key for uploading a post image.
	GetUploadUrl(context.Context, *connect.Request[v1.GetUploadUrlRequest]) (*connect.Response[v1.GetUploadUrlResponse], error)
}

// NewPostsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostsServiceHandler(svc PostsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	postsServiceMethods := v1.File_posts_v1_posts_proto.Services().ByName("PostsService").Methods()
	postsServiceAddPostHandler := connect.NewUnaryHandler(
		PostsServiceAddPostProcedure,
		svc.AddPost,
		connect.WithSchema(postsServiceMethods.ByName("AddPost")),
		connect.WithHandlerOptions(opts...),
	)
	postsServiceGetPostByIDHandler := connect.NewUnaryHandler(
		PostsServiceGetPostByIDProcedure,
		svc.GetPostByID,
		connect.WithSchema(postsServiceMethods.ByName("GetPostByID")),
		connect.WithHandlerOptions(opts...),
	)
	postsServiceGetPostsHandler := connect.NewUnaryHandler(
		PostsServiceGetPostsProcedure,
		svc.GetPosts,
		connect.WithSchema(postsServiceMethods.ByName("GetPosts")),
		connect.WithHandlerOptions(opts...),
	)
	postsServiceDeletePostHandler := connect.NewUnaryHandler(
		PostsServiceDeletePostProcedure,
		svc.DeletePost,
		connect.WithSchema(postsServiceMethods.ByName("DeletePost")),
		connect.WithHandlerOptions(opts...),
	)
	postsServiceGetUploadUrlHandler := connect.NewUnaryHandler(
		PostsServiceGetUploadUrlProcedure,
		svc.GetUploadUrl,
		connect.WithSchema(postsServiceMethods.ByName("GetUploadUrl")),
		connect.WithHandlerOptions(opts...),
	)
	return "/posts.v1.PostsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostsServiceAddPostProcedure:
			postsServiceAddPostHandler.ServeHTTP(w, r)
		case PostsServiceGetPostByIDProcedure:
			postsServiceGetPostByIDHandler.ServeHTTP(w, r)
		case PostsServiceGetPostsProcedure:
			postsServiceGetPostsHandler.ServeHTTP(w, r)
		case PostsServiceDeletePostProcedure:
			postsServiceDeletePostHandler.ServeHTTP(w, r)
		case PostsServiceGetUploadUrlProcedure:
			postsServiceGetUploadUrlHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostsServiceHandler struct{}

func (UnimplementedPostsServiceHandler) AddPost(context.Context, *connect.Request[v1.AddPostRequest]) (*connect.Response[v1.AddPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostsService.AddPost is not implemented"))
}

func (UnimplementedPostsServiceHandler) GetPostByID(context.Context, *connect.Request[v1.GetPostByIDRequest]) (*connect.Response[v1.GetPostByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostsService.GetPostByID is not implemented"))
}

func (UnimplementedPostsServiceHandler) GetPosts(context.Context, *connect.Request[v1.GetPostsRequest]) (*connect.Response[v1.GetPostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostsService.GetPosts is not implemented"))
}

func (UnimplementedPostsServiceHandler) DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostsService.DeletePost is not implemented"))
}

func (UnimplementedPostsServiceHandler) GetUploadUrl(context.Context, *connect.Request[v1.GetUploadUrlRequest]) (*connect.Response[v1.GetUploadUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostsService.GetUploadUrl is not implemented"))
}
