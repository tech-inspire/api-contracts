// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: views/v1/views.proto

package viewsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ViewsService_GetPostViewsCount_FullMethodName  = "/views.v1.ViewsService/GetPostViewsCount"
	ViewsService_GetPostsViewsCount_FullMethodName = "/views.v1.ViewsService/GetPostsViewsCount"
	ViewsService_ViewPost_FullMethodName           = "/views.v1.ViewsService/ViewPost"
)

// ViewsServiceClient is the client API for ViewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewsServiceClient interface {
	// Get current views count for a post
	GetPostViewsCount(ctx context.Context, in *GetViewsCountRequest, opts ...grpc.CallOption) (*GetViewsCountResponse, error)
	GetPostsViewsCount(ctx context.Context, in *GetViewsCountRequest, opts ...grpc.CallOption) (*GetViewsCountResponse, error)
	// View a post
	ViewPost(ctx context.Context, in *ViewPostRequest, opts ...grpc.CallOption) (*ViewPostResponse, error)
}

type viewsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewsServiceClient(cc grpc.ClientConnInterface) ViewsServiceClient {
	return &viewsServiceClient{cc}
}

func (c *viewsServiceClient) GetPostViewsCount(ctx context.Context, in *GetViewsCountRequest, opts ...grpc.CallOption) (*GetViewsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetViewsCountResponse)
	err := c.cc.Invoke(ctx, ViewsService_GetPostViewsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewsServiceClient) GetPostsViewsCount(ctx context.Context, in *GetViewsCountRequest, opts ...grpc.CallOption) (*GetViewsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetViewsCountResponse)
	err := c.cc.Invoke(ctx, ViewsService_GetPostsViewsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewsServiceClient) ViewPost(ctx context.Context, in *ViewPostRequest, opts ...grpc.CallOption) (*ViewPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewPostResponse)
	err := c.cc.Invoke(ctx, ViewsService_ViewPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewsServiceServer is the server API for ViewsService service.
// All implementations must embed UnimplementedViewsServiceServer
// for forward compatibility.
type ViewsServiceServer interface {
	// Get current views count for a post
	GetPostViewsCount(context.Context, *GetViewsCountRequest) (*GetViewsCountResponse, error)
	GetPostsViewsCount(context.Context, *GetViewsCountRequest) (*GetViewsCountResponse, error)
	// View a post
	ViewPost(context.Context, *ViewPostRequest) (*ViewPostResponse, error)
	mustEmbedUnimplementedViewsServiceServer()
}

// UnimplementedViewsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedViewsServiceServer struct{}

func (UnimplementedViewsServiceServer) GetPostViewsCount(context.Context, *GetViewsCountRequest) (*GetViewsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostViewsCount not implemented")
}
func (UnimplementedViewsServiceServer) GetPostsViewsCount(context.Context, *GetViewsCountRequest) (*GetViewsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsViewsCount not implemented")
}
func (UnimplementedViewsServiceServer) ViewPost(context.Context, *ViewPostRequest) (*ViewPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPost not implemented")
}
func (UnimplementedViewsServiceServer) mustEmbedUnimplementedViewsServiceServer() {}
func (UnimplementedViewsServiceServer) testEmbeddedByValue()                      {}

// UnsafeViewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewsServiceServer will
// result in compilation errors.
type UnsafeViewsServiceServer interface {
	mustEmbedUnimplementedViewsServiceServer()
}

func RegisterViewsServiceServer(s grpc.ServiceRegistrar, srv ViewsServiceServer) {
	// If the following call pancis, it indicates UnimplementedViewsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ViewsService_ServiceDesc, srv)
}

func _ViewsService_GetPostViewsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsServiceServer).GetPostViewsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsService_GetPostViewsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsServiceServer).GetPostViewsCount(ctx, req.(*GetViewsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewsService_GetPostsViewsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsServiceServer).GetPostsViewsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsService_GetPostsViewsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsServiceServer).GetPostsViewsCount(ctx, req.(*GetViewsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewsService_ViewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewsServiceServer).ViewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewsService_ViewPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewsServiceServer).ViewPost(ctx, req.(*ViewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ViewsService_ServiceDesc is the grpc.ServiceDesc for ViewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "views.v1.ViewsService",
	HandlerType: (*ViewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostViewsCount",
			Handler:    _ViewsService_GetPostViewsCount_Handler,
		},
		{
			MethodName: "GetPostsViewsCount",
			Handler:    _ViewsService_GetPostsViewsCount_Handler,
		},
		{
			MethodName: "ViewPost",
			Handler:    _ViewsService_ViewPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "views/v1/views.proto",
}
