// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: likes/v1/likes.proto

package likesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LikesService_GetLikesCount_FullMethodName     = "/likes.v1.LikesService/GetLikesCount"
	LikesService_HasUserLikedPost_FullMethodName  = "/likes.v1.LikesService/HasUserLikedPost"
	LikesService_LikePost_FullMethodName          = "/likes.v1.LikesService/LikePost"
	LikesService_UnlikePost_FullMethodName        = "/likes.v1.LikesService/UnlikePost"
	LikesService_GetUserLikedPosts_FullMethodName = "/likes.v1.LikesService/GetUserLikedPosts"
)

// LikesServiceClient is the client API for LikesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikesServiceClient interface {
	// Get current likes count for a post
	GetLikesCount(ctx context.Context, in *GetLikesCountRequest, opts ...grpc.CallOption) (*GetLikesCountResponse, error)
	// Check if user liked a post
	HasUserLikedPost(ctx context.Context, in *HasUserLikedPostRequest, opts ...grpc.CallOption) (*HasUserLikedPostResponse, error)
	// Like a post
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
	// Unlike a post
	UnlikePost(ctx context.Context, in *UnlikePostRequest, opts ...grpc.CallOption) (*UnlikePostResponse, error)
	// Get all posts liked by a user
	GetUserLikedPosts(ctx context.Context, in *GetUserLikedPostsRequest, opts ...grpc.CallOption) (*GetUserLikedPostsResponse, error)
}

type likesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikesServiceClient(cc grpc.ClientConnInterface) LikesServiceClient {
	return &likesServiceClient{cc}
}

func (c *likesServiceClient) GetLikesCount(ctx context.Context, in *GetLikesCountRequest, opts ...grpc.CallOption) (*GetLikesCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikesCountResponse)
	err := c.cc.Invoke(ctx, LikesService_GetLikesCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likesServiceClient) HasUserLikedPost(ctx context.Context, in *HasUserLikedPostRequest, opts ...grpc.CallOption) (*HasUserLikedPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasUserLikedPostResponse)
	err := c.cc.Invoke(ctx, LikesService_HasUserLikedPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likesServiceClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, LikesService_LikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likesServiceClient) UnlikePost(ctx context.Context, in *UnlikePostRequest, opts ...grpc.CallOption) (*UnlikePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikePostResponse)
	err := c.cc.Invoke(ctx, LikesService_UnlikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likesServiceClient) GetUserLikedPosts(ctx context.Context, in *GetUserLikedPostsRequest, opts ...grpc.CallOption) (*GetUserLikedPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLikedPostsResponse)
	err := c.cc.Invoke(ctx, LikesService_GetUserLikedPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikesServiceServer is the server API for LikesService service.
// All implementations must embed UnimplementedLikesServiceServer
// for forward compatibility.
type LikesServiceServer interface {
	// Get current likes count for a post
	GetLikesCount(context.Context, *GetLikesCountRequest) (*GetLikesCountResponse, error)
	// Check if user liked a post
	HasUserLikedPost(context.Context, *HasUserLikedPostRequest) (*HasUserLikedPostResponse, error)
	// Like a post
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	// Unlike a post
	UnlikePost(context.Context, *UnlikePostRequest) (*UnlikePostResponse, error)
	// Get all posts liked by a user
	GetUserLikedPosts(context.Context, *GetUserLikedPostsRequest) (*GetUserLikedPostsResponse, error)
	mustEmbedUnimplementedLikesServiceServer()
}

// UnimplementedLikesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLikesServiceServer struct{}

func (UnimplementedLikesServiceServer) GetLikesCount(context.Context, *GetLikesCountRequest) (*GetLikesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikesCount not implemented")
}
func (UnimplementedLikesServiceServer) HasUserLikedPost(context.Context, *HasUserLikedPostRequest) (*HasUserLikedPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUserLikedPost not implemented")
}
func (UnimplementedLikesServiceServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedLikesServiceServer) UnlikePost(context.Context, *UnlikePostRequest) (*UnlikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikePost not implemented")
}
func (UnimplementedLikesServiceServer) GetUserLikedPosts(context.Context, *GetUserLikedPostsRequest) (*GetUserLikedPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikedPosts not implemented")
}
func (UnimplementedLikesServiceServer) mustEmbedUnimplementedLikesServiceServer() {}
func (UnimplementedLikesServiceServer) testEmbeddedByValue()                      {}

// UnsafeLikesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikesServiceServer will
// result in compilation errors.
type UnsafeLikesServiceServer interface {
	mustEmbedUnimplementedLikesServiceServer()
}

func RegisterLikesServiceServer(s grpc.ServiceRegistrar, srv LikesServiceServer) {
	// If the following call pancis, it indicates UnimplementedLikesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LikesService_ServiceDesc, srv)
}

func _LikesService_GetLikesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikesServiceServer).GetLikesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikesService_GetLikesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikesServiceServer).GetLikesCount(ctx, req.(*GetLikesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikesService_HasUserLikedPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUserLikedPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikesServiceServer).HasUserLikedPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikesService_HasUserLikedPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikesServiceServer).HasUserLikedPost(ctx, req.(*HasUserLikedPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikesService_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikesServiceServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikesService_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikesServiceServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikesService_UnlikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikesServiceServer).UnlikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikesService_UnlikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikesServiceServer).UnlikePost(ctx, req.(*UnlikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikesService_GetUserLikedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLikedPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikesServiceServer).GetUserLikedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikesService_GetUserLikedPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikesServiceServer).GetUserLikedPosts(ctx, req.(*GetUserLikedPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LikesService_ServiceDesc is the grpc.ServiceDesc for LikesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "likes.v1.LikesService",
	HandlerType: (*LikesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLikesCount",
			Handler:    _LikesService_GetLikesCount_Handler,
		},
		{
			MethodName: "HasUserLikedPost",
			Handler:    _LikesService_HasUserLikedPost_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _LikesService_LikePost_Handler,
		},
		{
			MethodName: "UnlikePost",
			Handler:    _LikesService_UnlikePost_Handler,
		},
		{
			MethodName: "GetUserLikedPosts",
			Handler:    _LikesService_GetUserLikedPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "likes/v1/likes.proto",
}
