// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: likes/v1/likes.proto

package likesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tech-inspire/api-contracts/api/gen/go/likes/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LikesServiceName is the fully-qualified name of the LikesService service.
	LikesServiceName = "likes.v1.LikesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LikesServiceGetLikesCountProcedure is the fully-qualified name of the LikesService's
	// GetLikesCount RPC.
	LikesServiceGetLikesCountProcedure = "/likes.v1.LikesService/GetLikesCount"
	// LikesServiceHasUserLikedPostProcedure is the fully-qualified name of the LikesService's
	// HasUserLikedPost RPC.
	LikesServiceHasUserLikedPostProcedure = "/likes.v1.LikesService/HasUserLikedPost"
	// LikesServiceLikePostProcedure is the fully-qualified name of the LikesService's LikePost RPC.
	LikesServiceLikePostProcedure = "/likes.v1.LikesService/LikePost"
	// LikesServiceUnlikePostProcedure is the fully-qualified name of the LikesService's UnlikePost RPC.
	LikesServiceUnlikePostProcedure = "/likes.v1.LikesService/UnlikePost"
	// LikesServiceGetUserLikedPostsProcedure is the fully-qualified name of the LikesService's
	// GetUserLikedPosts RPC.
	LikesServiceGetUserLikedPostsProcedure = "/likes.v1.LikesService/GetUserLikedPosts"
)

// LikesServiceClient is a client for the likes.v1.LikesService service.
type LikesServiceClient interface {
	// Get current likes count for a post
	GetLikesCount(context.Context, *connect.Request[v1.GetLikesCountRequest]) (*connect.Response[v1.GetLikesCountResponse], error)
	// Check if user liked a post
	HasUserLikedPost(context.Context, *connect.Request[v1.HasUserLikedPostRequest]) (*connect.Response[v1.HasUserLikedPostResponse], error)
	// Like a post
	LikePost(context.Context, *connect.Request[v1.LikePostRequest]) (*connect.Response[v1.LikePostResponse], error)
	// Unlike a post
	UnlikePost(context.Context, *connect.Request[v1.UnlikePostRequest]) (*connect.Response[v1.UnlikePostResponse], error)
	// Get all posts liked by a user
	GetUserLikedPosts(context.Context, *connect.Request[v1.GetUserLikedPostsRequest]) (*connect.Response[v1.GetUserLikedPostsResponse], error)
}

// NewLikesServiceClient constructs a client for the likes.v1.LikesService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLikesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LikesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	likesServiceMethods := v1.File_likes_v1_likes_proto.Services().ByName("LikesService").Methods()
	return &likesServiceClient{
		getLikesCount: connect.NewClient[v1.GetLikesCountRequest, v1.GetLikesCountResponse](
			httpClient,
			baseURL+LikesServiceGetLikesCountProcedure,
			connect.WithSchema(likesServiceMethods.ByName("GetLikesCount")),
			connect.WithClientOptions(opts...),
		),
		hasUserLikedPost: connect.NewClient[v1.HasUserLikedPostRequest, v1.HasUserLikedPostResponse](
			httpClient,
			baseURL+LikesServiceHasUserLikedPostProcedure,
			connect.WithSchema(likesServiceMethods.ByName("HasUserLikedPost")),
			connect.WithClientOptions(opts...),
		),
		likePost: connect.NewClient[v1.LikePostRequest, v1.LikePostResponse](
			httpClient,
			baseURL+LikesServiceLikePostProcedure,
			connect.WithSchema(likesServiceMethods.ByName("LikePost")),
			connect.WithClientOptions(opts...),
		),
		unlikePost: connect.NewClient[v1.UnlikePostRequest, v1.UnlikePostResponse](
			httpClient,
			baseURL+LikesServiceUnlikePostProcedure,
			connect.WithSchema(likesServiceMethods.ByName("UnlikePost")),
			connect.WithClientOptions(opts...),
		),
		getUserLikedPosts: connect.NewClient[v1.GetUserLikedPostsRequest, v1.GetUserLikedPostsResponse](
			httpClient,
			baseURL+LikesServiceGetUserLikedPostsProcedure,
			connect.WithSchema(likesServiceMethods.ByName("GetUserLikedPosts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// likesServiceClient implements LikesServiceClient.
type likesServiceClient struct {
	getLikesCount     *connect.Client[v1.GetLikesCountRequest, v1.GetLikesCountResponse]
	hasUserLikedPost  *connect.Client[v1.HasUserLikedPostRequest, v1.HasUserLikedPostResponse]
	likePost          *connect.Client[v1.LikePostRequest, v1.LikePostResponse]
	unlikePost        *connect.Client[v1.UnlikePostRequest, v1.UnlikePostResponse]
	getUserLikedPosts *connect.Client[v1.GetUserLikedPostsRequest, v1.GetUserLikedPostsResponse]
}

// GetLikesCount calls likes.v1.LikesService.GetLikesCount.
func (c *likesServiceClient) GetLikesCount(ctx context.Context, req *connect.Request[v1.GetLikesCountRequest]) (*connect.Response[v1.GetLikesCountResponse], error) {
	return c.getLikesCount.CallUnary(ctx, req)
}

// HasUserLikedPost calls likes.v1.LikesService.HasUserLikedPost.
func (c *likesServiceClient) HasUserLikedPost(ctx context.Context, req *connect.Request[v1.HasUserLikedPostRequest]) (*connect.Response[v1.HasUserLikedPostResponse], error) {
	return c.hasUserLikedPost.CallUnary(ctx, req)
}

// LikePost calls likes.v1.LikesService.LikePost.
func (c *likesServiceClient) LikePost(ctx context.Context, req *connect.Request[v1.LikePostRequest]) (*connect.Response[v1.LikePostResponse], error) {
	return c.likePost.CallUnary(ctx, req)
}

// UnlikePost calls likes.v1.LikesService.UnlikePost.
func (c *likesServiceClient) UnlikePost(ctx context.Context, req *connect.Request[v1.UnlikePostRequest]) (*connect.Response[v1.UnlikePostResponse], error) {
	return c.unlikePost.CallUnary(ctx, req)
}

// GetUserLikedPosts calls likes.v1.LikesService.GetUserLikedPosts.
func (c *likesServiceClient) GetUserLikedPosts(ctx context.Context, req *connect.Request[v1.GetUserLikedPostsRequest]) (*connect.Response[v1.GetUserLikedPostsResponse], error) {
	return c.getUserLikedPosts.CallUnary(ctx, req)
}

// LikesServiceHandler is an implementation of the likes.v1.LikesService service.
type LikesServiceHandler interface {
	// Get current likes count for a post
	GetLikesCount(context.Context, *connect.Request[v1.GetLikesCountRequest]) (*connect.Response[v1.GetLikesCountResponse], error)
	// Check if user liked a post
	HasUserLikedPost(context.Context, *connect.Request[v1.HasUserLikedPostRequest]) (*connect.Response[v1.HasUserLikedPostResponse], error)
	// Like a post
	LikePost(context.Context, *connect.Request[v1.LikePostRequest]) (*connect.Response[v1.LikePostResponse], error)
	// Unlike a post
	UnlikePost(context.Context, *connect.Request[v1.UnlikePostRequest]) (*connect.Response[v1.UnlikePostResponse], error)
	// Get all posts liked by a user
	GetUserLikedPosts(context.Context, *connect.Request[v1.GetUserLikedPostsRequest]) (*connect.Response[v1.GetUserLikedPostsResponse], error)
}

// NewLikesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLikesServiceHandler(svc LikesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	likesServiceMethods := v1.File_likes_v1_likes_proto.Services().ByName("LikesService").Methods()
	likesServiceGetLikesCountHandler := connect.NewUnaryHandler(
		LikesServiceGetLikesCountProcedure,
		svc.GetLikesCount,
		connect.WithSchema(likesServiceMethods.ByName("GetLikesCount")),
		connect.WithHandlerOptions(opts...),
	)
	likesServiceHasUserLikedPostHandler := connect.NewUnaryHandler(
		LikesServiceHasUserLikedPostProcedure,
		svc.HasUserLikedPost,
		connect.WithSchema(likesServiceMethods.ByName("HasUserLikedPost")),
		connect.WithHandlerOptions(opts...),
	)
	likesServiceLikePostHandler := connect.NewUnaryHandler(
		LikesServiceLikePostProcedure,
		svc.LikePost,
		connect.WithSchema(likesServiceMethods.ByName("LikePost")),
		connect.WithHandlerOptions(opts...),
	)
	likesServiceUnlikePostHandler := connect.NewUnaryHandler(
		LikesServiceUnlikePostProcedure,
		svc.UnlikePost,
		connect.WithSchema(likesServiceMethods.ByName("UnlikePost")),
		connect.WithHandlerOptions(opts...),
	)
	likesServiceGetUserLikedPostsHandler := connect.NewUnaryHandler(
		LikesServiceGetUserLikedPostsProcedure,
		svc.GetUserLikedPosts,
		connect.WithSchema(likesServiceMethods.ByName("GetUserLikedPosts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/likes.v1.LikesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LikesServiceGetLikesCountProcedure:
			likesServiceGetLikesCountHandler.ServeHTTP(w, r)
		case LikesServiceHasUserLikedPostProcedure:
			likesServiceHasUserLikedPostHandler.ServeHTTP(w, r)
		case LikesServiceLikePostProcedure:
			likesServiceLikePostHandler.ServeHTTP(w, r)
		case LikesServiceUnlikePostProcedure:
			likesServiceUnlikePostHandler.ServeHTTP(w, r)
		case LikesServiceGetUserLikedPostsProcedure:
			likesServiceGetUserLikedPostsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLikesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLikesServiceHandler struct{}

func (UnimplementedLikesServiceHandler) GetLikesCount(context.Context, *connect.Request[v1.GetLikesCountRequest]) (*connect.Response[v1.GetLikesCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likes.v1.LikesService.GetLikesCount is not implemented"))
}

func (UnimplementedLikesServiceHandler) HasUserLikedPost(context.Context, *connect.Request[v1.HasUserLikedPostRequest]) (*connect.Response[v1.HasUserLikedPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likes.v1.LikesService.HasUserLikedPost is not implemented"))
}

func (UnimplementedLikesServiceHandler) LikePost(context.Context, *connect.Request[v1.LikePostRequest]) (*connect.Response[v1.LikePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likes.v1.LikesService.LikePost is not implemented"))
}

func (UnimplementedLikesServiceHandler) UnlikePost(context.Context, *connect.Request[v1.UnlikePostRequest]) (*connect.Response[v1.UnlikePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likes.v1.LikesService.UnlikePost is not implemented"))
}

func (UnimplementedLikesServiceHandler) GetUserLikedPosts(context.Context, *connect.Request[v1.GetUserLikedPostsRequest]) (*connect.Response[v1.GetUserLikedPostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("likes.v1.LikesService.GetUserLikedPosts is not implemented"))
}
