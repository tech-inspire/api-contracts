// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: embeddings/v1/embeddings.proto

package embeddingsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tech-inspire/api-contracts/api/gen/go/embeddings/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EmbeddingsServiceName is the fully-qualified name of the EmbeddingsService service.
	EmbeddingsServiceName = "embeddings.v1.EmbeddingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmbeddingsServiceGenerateTextEmbeddingsProcedure is the fully-qualified name of the
	// EmbeddingsService's GenerateTextEmbeddings RPC.
	EmbeddingsServiceGenerateTextEmbeddingsProcedure = "/embeddings.v1.EmbeddingsService/GenerateTextEmbeddings"
)

// EmbeddingsServiceClient is a client for the embeddings.v1.EmbeddingsService service.
type EmbeddingsServiceClient interface {
	GenerateTextEmbeddings(context.Context, *connect.Request[v1.GenerateTextEmbeddingsRequest]) (*connect.Response[v1.GenerateTextEmbeddingsResponse], error)
}

// NewEmbeddingsServiceClient constructs a client for the embeddings.v1.EmbeddingsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmbeddingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EmbeddingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	embeddingsServiceMethods := v1.File_embeddings_v1_embeddings_proto.Services().ByName("EmbeddingsService").Methods()
	return &embeddingsServiceClient{
		generateTextEmbeddings: connect.NewClient[v1.GenerateTextEmbeddingsRequest, v1.GenerateTextEmbeddingsResponse](
			httpClient,
			baseURL+EmbeddingsServiceGenerateTextEmbeddingsProcedure,
			connect.WithSchema(embeddingsServiceMethods.ByName("GenerateTextEmbeddings")),
			connect.WithClientOptions(opts...),
		),
	}
}

// embeddingsServiceClient implements EmbeddingsServiceClient.
type embeddingsServiceClient struct {
	generateTextEmbeddings *connect.Client[v1.GenerateTextEmbeddingsRequest, v1.GenerateTextEmbeddingsResponse]
}

// GenerateTextEmbeddings calls embeddings.v1.EmbeddingsService.GenerateTextEmbeddings.
func (c *embeddingsServiceClient) GenerateTextEmbeddings(ctx context.Context, req *connect.Request[v1.GenerateTextEmbeddingsRequest]) (*connect.Response[v1.GenerateTextEmbeddingsResponse], error) {
	return c.generateTextEmbeddings.CallUnary(ctx, req)
}

// EmbeddingsServiceHandler is an implementation of the embeddings.v1.EmbeddingsService service.
type EmbeddingsServiceHandler interface {
	GenerateTextEmbeddings(context.Context, *connect.Request[v1.GenerateTextEmbeddingsRequest]) (*connect.Response[v1.GenerateTextEmbeddingsResponse], error)
}

// NewEmbeddingsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmbeddingsServiceHandler(svc EmbeddingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	embeddingsServiceMethods := v1.File_embeddings_v1_embeddings_proto.Services().ByName("EmbeddingsService").Methods()
	embeddingsServiceGenerateTextEmbeddingsHandler := connect.NewUnaryHandler(
		EmbeddingsServiceGenerateTextEmbeddingsProcedure,
		svc.GenerateTextEmbeddings,
		connect.WithSchema(embeddingsServiceMethods.ByName("GenerateTextEmbeddings")),
		connect.WithHandlerOptions(opts...),
	)
	return "/embeddings.v1.EmbeddingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmbeddingsServiceGenerateTextEmbeddingsProcedure:
			embeddingsServiceGenerateTextEmbeddingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmbeddingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmbeddingsServiceHandler struct{}

func (UnimplementedEmbeddingsServiceHandler) GenerateTextEmbeddings(context.Context, *connect.Request[v1.GenerateTextEmbeddingsRequest]) (*connect.Response[v1.GenerateTextEmbeddingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("embeddings.v1.EmbeddingsService.GenerateTextEmbeddings is not implemented"))
}
