// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: posts/v1/posts.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// PostsService provides operations to create, retrieve, and delete posts, as well
/// as to obtain upload URLs for post images.
public protocol Posts_V1_PostsServiceClientInterface: Sendable {

    /// AddPost creates a new post record. The client must have already uploaded the
    /// image to S3 and provide the upload session key.
    @discardableResult
    func `addPost`(request: Posts_V1_AddPostRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Posts_V1_AddPostResponse>) -> Void) -> Connect.Cancelable

    /// AddPost creates a new post record. The client must have already uploaded the
    /// image to S3 and provide the upload session key.
    @available(iOS 13, *)
    func `addPost`(request: Posts_V1_AddPostRequest, headers: Connect.Headers) async -> ResponseMessage<Posts_V1_AddPostResponse>

    /// GetPostByID retrieves a single post by its UUID.
    @discardableResult
    func `getPostByID`(request: Posts_V1_GetPostByIDRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Posts_V1_GetPostByIDResponse>) -> Void) -> Connect.Cancelable

    /// GetPostByID retrieves a single post by its UUID.
    @available(iOS 13, *)
    func `getPostByID`(request: Posts_V1_GetPostByIDRequest, headers: Connect.Headers) async -> ResponseMessage<Posts_V1_GetPostByIDResponse>

    /// GetPosts retrieves multiple posts by their UUIDs in a single batch request.
    @discardableResult
    func `getPosts`(request: Posts_V1_GetPostsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Posts_V1_GetPostsResponse>) -> Void) -> Connect.Cancelable

    /// GetPosts retrieves multiple posts by their UUIDs in a single batch request.
    @available(iOS 13, *)
    func `getPosts`(request: Posts_V1_GetPostsRequest, headers: Connect.Headers) async -> ResponseMessage<Posts_V1_GetPostsResponse>

    /// DeletePost removes an existing post by its UUID.
    @discardableResult
    func `deletePost`(request: Posts_V1_DeletePostRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Posts_V1_DeletePostResponse>) -> Void) -> Connect.Cancelable

    /// DeletePost removes an existing post by its UUID.
    @available(iOS 13, *)
    func `deletePost`(request: Posts_V1_DeletePostRequest, headers: Connect.Headers) async -> ResponseMessage<Posts_V1_DeletePostResponse>

    /// GetUploadUrl returns a presigned S3 URL and a session key for uploading a post image.
    @discardableResult
    func `getUploadURL`(request: Posts_V1_GetUploadUrlRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Posts_V1_GetUploadUrlResponse>) -> Void) -> Connect.Cancelable

    /// GetUploadUrl returns a presigned S3 URL and a session key for uploading a post image.
    @available(iOS 13, *)
    func `getUploadURL`(request: Posts_V1_GetUploadUrlRequest, headers: Connect.Headers) async -> ResponseMessage<Posts_V1_GetUploadUrlResponse>
}

/// Concrete implementation of `Posts_V1_PostsServiceClientInterface`.
public final class Posts_V1_PostsServiceClient: Posts_V1_PostsServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `addPost`(request: Posts_V1_AddPostRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Posts_V1_AddPostResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/posts.v1.PostsService/AddPost", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `addPost`(request: Posts_V1_AddPostRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Posts_V1_AddPostResponse> {
        return await self.client.unary(path: "/posts.v1.PostsService/AddPost", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getPostByID`(request: Posts_V1_GetPostByIDRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Posts_V1_GetPostByIDResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/posts.v1.PostsService/GetPostByID", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getPostByID`(request: Posts_V1_GetPostByIDRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Posts_V1_GetPostByIDResponse> {
        return await self.client.unary(path: "/posts.v1.PostsService/GetPostByID", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getPosts`(request: Posts_V1_GetPostsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Posts_V1_GetPostsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/posts.v1.PostsService/GetPosts", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getPosts`(request: Posts_V1_GetPostsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Posts_V1_GetPostsResponse> {
        return await self.client.unary(path: "/posts.v1.PostsService/GetPosts", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deletePost`(request: Posts_V1_DeletePostRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Posts_V1_DeletePostResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/posts.v1.PostsService/DeletePost", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deletePost`(request: Posts_V1_DeletePostRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Posts_V1_DeletePostResponse> {
        return await self.client.unary(path: "/posts.v1.PostsService/DeletePost", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUploadURL`(request: Posts_V1_GetUploadUrlRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Posts_V1_GetUploadUrlResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/posts.v1.PostsService/GetUploadUrl", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUploadURL`(request: Posts_V1_GetUploadUrlRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Posts_V1_GetUploadUrlResponse> {
        return await self.client.unary(path: "/posts.v1.PostsService/GetUploadUrl", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let addPost = Connect.MethodSpec(name: "AddPost", service: "posts.v1.PostsService", type: .unary)
            public static let getPostByID = Connect.MethodSpec(name: "GetPostByID", service: "posts.v1.PostsService", type: .unary)
            public static let getPosts = Connect.MethodSpec(name: "GetPosts", service: "posts.v1.PostsService", type: .unary)
            public static let deletePost = Connect.MethodSpec(name: "DeletePost", service: "posts.v1.PostsService", type: .unary)
            public static let getUploadURL = Connect.MethodSpec(name: "GetUploadUrl", service: "posts.v1.PostsService", type: .unary)
        }
    }
}
