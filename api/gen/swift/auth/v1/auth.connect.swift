// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: auth/v1/auth.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Auth_V1_AuthServiceClientInterface: Sendable {

    @discardableResult
    func `login`(request: Auth_V1_LoginRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_SuccessLoginResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `login`(request: Auth_V1_LoginRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_SuccessLoginResponse>

    @discardableResult
    func `register`(request: Auth_V1_RegisterRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_RegisterResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `register`(request: Auth_V1_RegisterRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_RegisterResponse>

    @discardableResult
    func `confirmEmail`(request: Auth_V1_ConfirmEmailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_SuccessLoginResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `confirmEmail`(request: Auth_V1_ConfirmEmailRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_SuccessLoginResponse>

    @discardableResult
    func `refreshToken`(request: Auth_V1_RefreshTokenRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_SuccessLoginResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `refreshToken`(request: Auth_V1_RefreshTokenRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_SuccessLoginResponse>

    @discardableResult
    func `logout`(request: Auth_V1_LogoutRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_LogoutResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `logout`(request: Auth_V1_LogoutRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_LogoutResponse>

    @discardableResult
    func `resetPassword`(request: Auth_V1_ResetPasswordRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_ResetPasswordResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `resetPassword`(request: Auth_V1_ResetPasswordRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_ResetPasswordResponse>

    @discardableResult
    func `confirmPasswordReset`(request: Auth_V1_ConfirmPasswordResetRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_ConfirmPasswordResetResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `confirmPasswordReset`(request: Auth_V1_ConfirmPasswordResetRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_ConfirmPasswordResetResponse>

    @discardableResult
    func `checkPasswordResetCode`(request: Auth_V1_CheckPasswordResetCodeRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_CheckPasswordResetCodeResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `checkPasswordResetCode`(request: Auth_V1_CheckPasswordResetCodeRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_CheckPasswordResetCodeResponse>

    @discardableResult
    func `getMe`(request: Auth_V1_GetMeRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_GetUserResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getMe`(request: Auth_V1_GetMeRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_GetUserResponse>

    @discardableResult
    func `updateUser`(request: Auth_V1_UpdateUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_User>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateUser`(request: Auth_V1_UpdateUserRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_User>

    @discardableResult
    func `getUser`(request: Auth_V1_GetUserRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_GetUserResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getUser`(request: Auth_V1_GetUserRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_GetUserResponse>

    @discardableResult
    func `uploadAvatar`(request: Auth_V1_UploadUserAvatarRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_UploadUserAvatarResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `uploadAvatar`(request: Auth_V1_UploadUserAvatarRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_UploadUserAvatarResponse>
}

/// Concrete implementation of `Auth_V1_AuthServiceClientInterface`.
public final class Auth_V1_AuthServiceClient: Auth_V1_AuthServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `login`(request: Auth_V1_LoginRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_SuccessLoginResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/Login", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `login`(request: Auth_V1_LoginRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_SuccessLoginResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/Login", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `register`(request: Auth_V1_RegisterRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_RegisterResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/Register", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `register`(request: Auth_V1_RegisterRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_RegisterResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/Register", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `confirmEmail`(request: Auth_V1_ConfirmEmailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_SuccessLoginResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/ConfirmEmail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `confirmEmail`(request: Auth_V1_ConfirmEmailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_SuccessLoginResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/ConfirmEmail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `refreshToken`(request: Auth_V1_RefreshTokenRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_SuccessLoginResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/RefreshToken", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `refreshToken`(request: Auth_V1_RefreshTokenRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_SuccessLoginResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/RefreshToken", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `logout`(request: Auth_V1_LogoutRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_LogoutResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/Logout", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `logout`(request: Auth_V1_LogoutRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_LogoutResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/Logout", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `resetPassword`(request: Auth_V1_ResetPasswordRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_ResetPasswordResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/ResetPassword", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `resetPassword`(request: Auth_V1_ResetPasswordRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_ResetPasswordResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/ResetPassword", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `confirmPasswordReset`(request: Auth_V1_ConfirmPasswordResetRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_ConfirmPasswordResetResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/ConfirmPasswordReset", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `confirmPasswordReset`(request: Auth_V1_ConfirmPasswordResetRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_ConfirmPasswordResetResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/ConfirmPasswordReset", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `checkPasswordResetCode`(request: Auth_V1_CheckPasswordResetCodeRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_CheckPasswordResetCodeResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/CheckPasswordResetCode", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `checkPasswordResetCode`(request: Auth_V1_CheckPasswordResetCodeRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_CheckPasswordResetCodeResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/CheckPasswordResetCode", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getMe`(request: Auth_V1_GetMeRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_GetUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/GetMe", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getMe`(request: Auth_V1_GetMeRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_GetUserResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/GetMe", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateUser`(request: Auth_V1_UpdateUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_User>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/UpdateUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateUser`(request: Auth_V1_UpdateUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_User> {
        return await self.client.unary(path: "/auth.v1.AuthService/UpdateUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUser`(request: Auth_V1_GetUserRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_GetUserResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/GetUser", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUser`(request: Auth_V1_GetUserRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_GetUserResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/GetUser", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `uploadAvatar`(request: Auth_V1_UploadUserAvatarRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_UploadUserAvatarResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/UploadAvatar", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `uploadAvatar`(request: Auth_V1_UploadUserAvatarRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_UploadUserAvatarResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/UploadAvatar", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let login = Connect.MethodSpec(name: "Login", service: "auth.v1.AuthService", type: .unary)
            public static let register = Connect.MethodSpec(name: "Register", service: "auth.v1.AuthService", type: .unary)
            public static let confirmEmail = Connect.MethodSpec(name: "ConfirmEmail", service: "auth.v1.AuthService", type: .unary)
            public static let refreshToken = Connect.MethodSpec(name: "RefreshToken", service: "auth.v1.AuthService", type: .unary)
            public static let logout = Connect.MethodSpec(name: "Logout", service: "auth.v1.AuthService", type: .unary)
            public static let resetPassword = Connect.MethodSpec(name: "ResetPassword", service: "auth.v1.AuthService", type: .unary)
            public static let confirmPasswordReset = Connect.MethodSpec(name: "ConfirmPasswordReset", service: "auth.v1.AuthService", type: .unary)
            public static let checkPasswordResetCode = Connect.MethodSpec(name: "CheckPasswordResetCode", service: "auth.v1.AuthService", type: .unary)
            public static let getMe = Connect.MethodSpec(name: "GetMe", service: "auth.v1.AuthService", type: .unary)
            public static let updateUser = Connect.MethodSpec(name: "UpdateUser", service: "auth.v1.AuthService", type: .unary)
            public static let getUser = Connect.MethodSpec(name: "GetUser", service: "auth.v1.AuthService", type: .unary)
            public static let uploadAvatar = Connect.MethodSpec(name: "UploadAvatar", service: "auth.v1.AuthService", type: .unary)
        }
    }
}
