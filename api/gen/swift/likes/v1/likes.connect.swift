// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: likes/v1/likes.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Likes_V1_LikesServiceClientInterface: Sendable {

    /// Get current likes count for a post
    @discardableResult
    func `getLikesCount`(request: Likes_V1_GetLikesCountRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Likes_V1_GetLikesCountResponse>) -> Void) -> Connect.Cancelable

    /// Get current likes count for a post
    @available(iOS 13, *)
    func `getLikesCount`(request: Likes_V1_GetLikesCountRequest, headers: Connect.Headers) async -> ResponseMessage<Likes_V1_GetLikesCountResponse>

    /// Check if user liked a post
    @discardableResult
    func `hasUserLikedPost`(request: Likes_V1_HasUserLikedPostRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Likes_V1_HasUserLikedPostResponse>) -> Void) -> Connect.Cancelable

    /// Check if user liked a post
    @available(iOS 13, *)
    func `hasUserLikedPost`(request: Likes_V1_HasUserLikedPostRequest, headers: Connect.Headers) async -> ResponseMessage<Likes_V1_HasUserLikedPostResponse>

    /// Like a post
    @discardableResult
    func `likePost`(request: Likes_V1_LikePostRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Likes_V1_LikePostResponse>) -> Void) -> Connect.Cancelable

    /// Like a post
    @available(iOS 13, *)
    func `likePost`(request: Likes_V1_LikePostRequest, headers: Connect.Headers) async -> ResponseMessage<Likes_V1_LikePostResponse>

    /// Unlike a post
    @discardableResult
    func `unlikePost`(request: Likes_V1_UnlikePostRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Likes_V1_UnlikePostResponse>) -> Void) -> Connect.Cancelable

    /// Unlike a post
    @available(iOS 13, *)
    func `unlikePost`(request: Likes_V1_UnlikePostRequest, headers: Connect.Headers) async -> ResponseMessage<Likes_V1_UnlikePostResponse>

    /// Get all posts liked by a user
    @discardableResult
    func `getUserLikedPosts`(request: Likes_V1_GetUserLikedPostsRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Likes_V1_GetUserLikedPostsResponse>) -> Void) -> Connect.Cancelable

    /// Get all posts liked by a user
    @available(iOS 13, *)
    func `getUserLikedPosts`(request: Likes_V1_GetUserLikedPostsRequest, headers: Connect.Headers) async -> ResponseMessage<Likes_V1_GetUserLikedPostsResponse>
}

/// Concrete implementation of `Likes_V1_LikesServiceClientInterface`.
public final class Likes_V1_LikesServiceClient: Likes_V1_LikesServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `getLikesCount`(request: Likes_V1_GetLikesCountRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Likes_V1_GetLikesCountResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/likes.v1.LikesService/GetLikesCount", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getLikesCount`(request: Likes_V1_GetLikesCountRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Likes_V1_GetLikesCountResponse> {
        return await self.client.unary(path: "/likes.v1.LikesService/GetLikesCount", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `hasUserLikedPost`(request: Likes_V1_HasUserLikedPostRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Likes_V1_HasUserLikedPostResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/likes.v1.LikesService/HasUserLikedPost", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `hasUserLikedPost`(request: Likes_V1_HasUserLikedPostRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Likes_V1_HasUserLikedPostResponse> {
        return await self.client.unary(path: "/likes.v1.LikesService/HasUserLikedPost", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `likePost`(request: Likes_V1_LikePostRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Likes_V1_LikePostResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/likes.v1.LikesService/LikePost", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `likePost`(request: Likes_V1_LikePostRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Likes_V1_LikePostResponse> {
        return await self.client.unary(path: "/likes.v1.LikesService/LikePost", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `unlikePost`(request: Likes_V1_UnlikePostRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Likes_V1_UnlikePostResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/likes.v1.LikesService/UnlikePost", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `unlikePost`(request: Likes_V1_UnlikePostRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Likes_V1_UnlikePostResponse> {
        return await self.client.unary(path: "/likes.v1.LikesService/UnlikePost", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUserLikedPosts`(request: Likes_V1_GetUserLikedPostsRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Likes_V1_GetUserLikedPostsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/likes.v1.LikesService/GetUserLikedPosts", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUserLikedPosts`(request: Likes_V1_GetUserLikedPostsRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Likes_V1_GetUserLikedPostsResponse> {
        return await self.client.unary(path: "/likes.v1.LikesService/GetUserLikedPosts", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getLikesCount = Connect.MethodSpec(name: "GetLikesCount", service: "likes.v1.LikesService", type: .unary)
            public static let hasUserLikedPost = Connect.MethodSpec(name: "HasUserLikedPost", service: "likes.v1.LikesService", type: .unary)
            public static let likePost = Connect.MethodSpec(name: "LikePost", service: "likes.v1.LikesService", type: .unary)
            public static let unlikePost = Connect.MethodSpec(name: "UnlikePost", service: "likes.v1.LikesService", type: .unary)
            public static let getUserLikedPosts = Connect.MethodSpec(name: "GetUserLikedPosts", service: "likes.v1.LikesService", type: .unary)
        }
    }
}
