// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: search/v1/search.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Search_V1_PhotoOrientation: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case orientationUnspecified // = 0

  /// height > width
  case portrait // = 1

  /// width > height
  case landscape // = 2

  /// width == height (within tolerance)
  case square // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .orientationUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .orientationUnspecified
    case 1: self = .portrait
    case 2: self = .landscape
    case 3: self = .square
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .orientationUnspecified: return 0
    case .portrait: return 1
    case .landscape: return 2
    case .square: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Search_V1_PhotoOrientation] = [
    .orientationUnspecified,
    .portrait,
    .landscape,
    .square,
  ]

}

/// --- Sorting Enums ---
public enum Search_V1_SortField: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case createdAt // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .createdAt
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .createdAt: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Search_V1_SortField] = [
    .unspecified,
    .createdAt,
  ]

}

public enum Search_V1_SortOrder: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case asc // = 1
  case desc // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .asc
    case 2: self = .desc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .asc: return 1
    case .desc: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Search_V1_SortOrder] = [
    .unspecified,
    .asc,
    .desc,
  ]

}

public struct Search_V1_SearchImagesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var searchBy: Search_V1_SearchImagesRequest.OneOf_SearchBy? = nil

  public var textQuery: String {
    get {
      if case .textQuery(let v)? = searchBy {return v}
      return String()
    }
    set {searchBy = .textQuery(newValue)}
  }

  public var referencePostID: String {
    get {
      if case .referencePostID(let v)? = searchBy {return v}
      return String()
    }
    set {searchBy = .referencePostID(newValue)}
  }

  public var authorID: String {
    get {return _authorID ?? String()}
    set {_authorID = newValue}
  }
  /// Returns true if `authorID` has been explicitly set.
  public var hasAuthorID: Bool {return self._authorID != nil}
  /// Clears the value of `authorID`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorID() {self._authorID = nil}

  public var orientation: Search_V1_PhotoOrientation {
    get {return _orientation ?? .orientationUnspecified}
    set {_orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  public var hasOrientation: Bool {return self._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  public mutating func clearOrientation() {self._orientation = nil}

  public var sortBy: Search_V1_SortField = .unspecified

  public var sortOrder: Search_V1_SortOrder = .unspecified

  public var limit: UInt32 = 0

  public var offset: UInt32 = 0

  /// Minimum similarity score threshold for embedding search. Default is 0.7 (subject to change)
  public var minSimilarityScore: Float {
    get {return _minSimilarityScore ?? 0}
    set {_minSimilarityScore = newValue}
  }
  /// Returns true if `minSimilarityScore` has been explicitly set.
  public var hasMinSimilarityScore: Bool {return self._minSimilarityScore != nil}
  /// Clears the value of `minSimilarityScore`. Subsequent reads from it will return its default value.
  public mutating func clearMinSimilarityScore() {self._minSimilarityScore = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_SearchBy: Equatable, Sendable {
    case textQuery(String)
    case referencePostID(String)

  }

  public init() {}

  fileprivate var _authorID: String? = nil
  fileprivate var _orientation: Search_V1_PhotoOrientation? = nil
  fileprivate var _minSimilarityScore: Float? = nil
}

public struct Search_V1_SearchImagesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Matches with score â‰¥ threshold
  public var results: [Search_V1_SearchResult] = []

  public var limit: UInt32 = 0

  public var offset: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Search_V1_SearchResult: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var postID: String = String()

  public var similarity: Float {
    get {return _similarity ?? 0}
    set {_similarity = newValue}
  }
  /// Returns true if `similarity` has been explicitly set.
  public var hasSimilarity: Bool {return self._similarity != nil}
  /// Clears the value of `similarity`. Subsequent reads from it will return its default value.
  public mutating func clearSimilarity() {self._similarity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _similarity: Float? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "search.v1"

extension Search_V1_PhotoOrientation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORIENTATION_UNSPECIFIED"),
    1: .same(proto: "PORTRAIT"),
    2: .same(proto: "LANDSCAPE"),
    3: .same(proto: "SQUARE"),
  ]
}

extension Search_V1_SortField: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SORT_FIELD_UNSPECIFIED"),
    1: .same(proto: "CREATED_AT"),
  ]
}

extension Search_V1_SortOrder: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SORT_ORDER_UNSPECIFIED"),
    1: .same(proto: "ASC"),
    2: .same(proto: "DESC"),
  ]
}

extension Search_V1_SearchImagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchImagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_query"),
    2: .standard(proto: "reference_post_id"),
    9: .standard(proto: "author_id"),
    3: .same(proto: "orientation"),
    4: .standard(proto: "sort_by"),
    5: .standard(proto: "sort_order"),
    6: .same(proto: "limit"),
    7: .same(proto: "offset"),
    8: .standard(proto: "min_similarity_score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.searchBy != nil {try decoder.handleConflictingOneOf()}
          self.searchBy = .textQuery(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.searchBy != nil {try decoder.handleConflictingOneOf()}
          self.searchBy = .referencePostID(v)
        }
      }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._orientation) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.sortBy) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.sortOrder) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.limit) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.offset) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self._minSimilarityScore) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._authorID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.searchBy {
    case .textQuery?: try {
      guard case .textQuery(let v)? = self.searchBy else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .referencePostID?: try {
      guard case .referencePostID(let v)? = self.searchBy else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try { if let v = self._orientation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    if self.sortBy != .unspecified {
      try visitor.visitSingularEnumField(value: self.sortBy, fieldNumber: 4)
    }
    if self.sortOrder != .unspecified {
      try visitor.visitSingularEnumField(value: self.sortOrder, fieldNumber: 5)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 6)
    }
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 7)
    }
    try { if let v = self._minSimilarityScore {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._authorID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Search_V1_SearchImagesRequest, rhs: Search_V1_SearchImagesRequest) -> Bool {
    if lhs.searchBy != rhs.searchBy {return false}
    if lhs._authorID != rhs._authorID {return false}
    if lhs._orientation != rhs._orientation {return false}
    if lhs.sortBy != rhs.sortBy {return false}
    if lhs.sortOrder != rhs.sortOrder {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs._minSimilarityScore != rhs._minSimilarityScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Search_V1_SearchImagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchImagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
    5: .same(proto: "limit"),
    6: .same(proto: "offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.limit) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.offset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 5)
    }
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Search_V1_SearchImagesResponse, rhs: Search_V1_SearchImagesResponse) -> Bool {
    if lhs.results != rhs.results {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Search_V1_SearchResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .same(proto: "similarity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._similarity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    try { if let v = self._similarity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Search_V1_SearchResult, rhs: Search_V1_SearchResult) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs._similarity != rhs._similarity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
