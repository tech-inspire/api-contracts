// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: views/v1/views.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Views_V1_ViewsServiceClientInterface: Sendable {

    /// Get current views count for a post
    @discardableResult
    func `getPostViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Views_V1_GetViewsCountResponse>) -> Void) -> Connect.Cancelable

    /// Get current views count for a post
    @available(iOS 13, *)
    func `getPostViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers) async -> ResponseMessage<Views_V1_GetViewsCountResponse>

    @discardableResult
    func `getPostsViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Views_V1_GetViewsCountResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getPostsViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers) async -> ResponseMessage<Views_V1_GetViewsCountResponse>

    /// View a post
    @discardableResult
    func `viewPost`(request: Views_V1_ViewPostRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Views_V1_ViewPostResponse>) -> Void) -> Connect.Cancelable

    /// View a post
    @available(iOS 13, *)
    func `viewPost`(request: Views_V1_ViewPostRequest, headers: Connect.Headers) async -> ResponseMessage<Views_V1_ViewPostResponse>
}

/// Concrete implementation of `Views_V1_ViewsServiceClientInterface`.
public final class Views_V1_ViewsServiceClient: Views_V1_ViewsServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `getPostViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Views_V1_GetViewsCountResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/views.v1.ViewsService/GetPostViewsCount", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getPostViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Views_V1_GetViewsCountResponse> {
        return await self.client.unary(path: "/views.v1.ViewsService/GetPostViewsCount", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getPostsViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Views_V1_GetViewsCountResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/views.v1.ViewsService/GetPostsViewsCount", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getPostsViewsCount`(request: Views_V1_GetViewsCountRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Views_V1_GetViewsCountResponse> {
        return await self.client.unary(path: "/views.v1.ViewsService/GetPostsViewsCount", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `viewPost`(request: Views_V1_ViewPostRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Views_V1_ViewPostResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/views.v1.ViewsService/ViewPost", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `viewPost`(request: Views_V1_ViewPostRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Views_V1_ViewPostResponse> {
        return await self.client.unary(path: "/views.v1.ViewsService/ViewPost", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getPostViewsCount = Connect.MethodSpec(name: "GetPostViewsCount", service: "views.v1.ViewsService", type: .unary)
            public static let getPostsViewsCount = Connect.MethodSpec(name: "GetPostsViewsCount", service: "views.v1.ViewsService", type: .unary)
            public static let viewPost = Connect.MethodSpec(name: "ViewPost", service: "views.v1.ViewsService", type: .unary)
        }
    }
}
